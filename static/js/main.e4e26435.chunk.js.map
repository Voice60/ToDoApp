{"version":3,"sources":["components/tasks.module.scss","redux/listReducer.js","components/taskName.jsx","components/tasks.jsx","components/tasksContainer.jsx","redux/store.js","App.js","index.js"],"names":["module","exports","ADD_TASK","TOGGLE_STATUS","EDIT_TASK","InitialState","items","task","status","id","currentId","listReducer","state","action","type","newList","i","length","TaskName","editTask","el","click","useState","editMode","setEditMode","taskNameValue","setTaskNameValue","className","cn","styles","statusTrue","emptyTask","spellCheck","placeholder","autoFocus","onBlur","trim","onChange","e","currentTarget","value","textareaTask","onClick","Tasks","tasks","toggleStatus","map","item","label","checkbox","custom小heckbox","connect","list","dispatch","reducers","combineReducers","store","createStore","AppConnect","addTask","MainApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4e26435.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"tasks_item__1rToU\",\"emergenceItem\":\"tasks_emergenceItem__1rLAV\",\"task\":\"tasks_task__2_gu6\",\"emptyTask\":\"tasks_emptyTask__2w5lA\",\"statusTrue\":\"tasks_statusTrue__3hd1C\",\"textareaTask\":\"tasks_textareaTask__LwXlm\",\"label\":\"tasks_label__4Okqm\",\"checkbox\":\"tasks_checkbox__1CFpN\",\"custom小heckbox\":\"tasks_custom小heckbox__rmXlB\"};","//consts\r\nconst ADD_TASK = 'ADD_TASK'\r\nconst TOGGLE_STATUS = 'TOGGLE_STATUS'\r\nconst EDIT_TASK = 'EDIT_TASK'\r\n\r\n// status true means that task not done\r\nlet InitialState = {\r\n  items: [{ task: 'Create Web Application', status: true, id: 1 }],\r\n  currentId: 1\r\n}\r\n\r\n//reducer\r\nconst listReducer = (state = InitialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TASK: {\r\n      state.currentId++\r\n      return {\r\n        ...state,\r\n        items: [...state.items, { task: '', status: true, id: state.currentId }]\r\n      }\r\n    }\r\n    case EDIT_TASK: {\r\n      let newList = [...state.items]\r\n      for (let i = 0; newList.length > i; i++) {\r\n        if (newList[i].id === action.id) {\r\n          newList[i].task = action.task\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        items: newList\r\n      }\r\n    }\r\n    case TOGGLE_STATUS: {\r\n      let newList = [...state.items]\r\n      for (let i = 0; newList.length > i; i++) {\r\n        if (newList[i].id === action.id) {\r\n          newList[i].status = !newList[i].status\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        items: newList\r\n      }\r\n    }\r\n    default: return state\r\n  }\r\n}\r\n\r\n//actions\r\nexport const addTask = () => ({ type: ADD_TASK })\r\nexport const toggleStatus = (id) => ({ type: TOGGLE_STATUS, id })\r\nexport const editTask = (id, task) => ({ type: EDIT_TASK, id, task })\r\n\r\n\r\nexport default listReducer","import React, { useState } from 'react'\r\nimport styles from './tasks.module.scss'\r\nimport cn from 'classnames'\r\n\r\nlet TaskName = ({ editTask, el, click }) => {\r\n  let [editMode, setEditMode] = useState(click)\r\n  let [taskNameValue, setTaskNameValue] = useState(el.task)\r\n\r\n  let activateEditMode = () => {\r\n    if (el.status) { setEditMode(true) }\r\n  }\r\n\r\n  let deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    editTask(el.id, taskNameValue.trim())\r\n    setTaskNameValue(el.task)\r\n  }\r\n\r\n  let onTaskChange = (e) => {\r\n    setTaskNameValue(e.currentTarget.value)\r\n  }\r\n\r\n  let className = cn(styles.task, {\r\n    [styles.statusTrue]: !el.status,\r\n    [styles.emptyTask]: !el.task\r\n  })\r\n  return (\r\n    <>\r\n      {editMode\r\n        ? <textarea spellCheck=\"false\"\r\n          placeholder='your task'\r\n          autoFocus\r\n          onBlur={deactivateEditMode}\r\n          onChange={onTaskChange}\r\n          value={taskNameValue}\r\n          className={styles.textareaTask}></textarea>\r\n        : <p onClick={activateEditMode}\r\n          className={className}>{el.task\r\n            ? el.task\r\n            : \"your task\"}</p>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TaskName","import React from 'react'\r\nimport TaskName from './taskName'\r\nimport styles from './tasks.module.scss'\r\n\r\nlet Tasks = ({ tasks, editTask, toggleStatus }) => {\r\n\r\n  return tasks.map((el) => {\r\n    return (\r\n      <div className={styles.item}>\r\n        <TaskName key={el.id} editTask={editTask} el={el} />\r\n        <label className={styles.label}>\r\n          <input onChange={() => {\r\n            toggleStatus(el.id)\r\n          }}\r\n            type=\"checkbox\"\r\n            value={el.status}\r\n            className={styles.checkbox}></input>\r\n          <span className={styles.custom小heckbox}></span>\r\n        </label>\r\n\r\n      </div>\r\n    )\r\n  })\r\n}\r\n\r\nexport default Tasks","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { toggleStatus, editTask } from '../redux/listReducer'\r\nimport Tasks from './tasks'\r\n\r\nlet TasksContainer = ({ tasks, toggleStatus, editTask }) => {\r\n  return <Tasks toggleStatus={toggleStatus} editTask={editTask} tasks={tasks} />\r\n}\r\n\r\nconst mstp = (state) => ({\r\n  tasks: state.list.items\r\n})\r\n\r\nconst mdtp = (dispatch) => ({\r\n  toggleStatus: (id) => {\r\n    dispatch(toggleStatus(id))\r\n  },\r\n  editTask: (id, task) => {\r\n    dispatch(editTask(id, task))\r\n  },\r\n})\r\n\r\nexport default connect(mstp, mdtp)(TasksContainer)","import { combineReducers, createStore } from \"redux\";\r\nimport listReducer from \"./listReducer\";\r\n\r\nlet reducers = combineReducers({\r\n  list: listReducer,\r\n})\r\n\r\nlet store = createStore(reducers)\r\nexport default store","import { connect, Provider } from 'react-redux';\r\nimport './App.scss';\r\nimport TasksContainer from './components/tasksContainer';\r\nimport { addTask } from './redux/listReducer';\r\nimport store from './redux/store';\r\n\r\nfunction App({ addTask }) {\r\n\r\n  return (\r\n    <div className='heroWrap'>\r\n      <header>\r\n        <h1 className='mainTitle'>All Tasks</h1>\r\n      </header>\r\n      <div className=\"mainWrap\">\r\n        <TasksContainer />\r\n      </div>\r\n      <button className='addNewTask' onClick={addTask}>+</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// desirable use selectors\r\nlet mstp = (state) => {\r\n  return {\r\n    list: state.list.items\r\n  }\r\n}\r\nlet mdtp = (dispatch) => {\r\n  return {\r\n    addTask: () => {\r\n      dispatch(addTask())\r\n    }\r\n  }\r\n}\r\n\r\nconst AppConnect = connect(mstp, mdtp)(App);\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <AppConnect />\r\n    </Provider>\r\n  )\r\n}\r\nexport default MainApp;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport MainApp from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n); \n"],"sourceRoot":""}
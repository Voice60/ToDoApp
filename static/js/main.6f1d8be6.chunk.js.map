{"version":3,"sources":["components/tasks.module.scss","components/tasks.jsx","redux/listReducer.js","redux/store.js","App.js","index.js"],"names":["module","exports","Tasks","el","editTask","toggleStatus","useState","editMode","setEditMode","task","taskNameValue","setTaskNameValue","classNameP","cn","styles","statusTrue","status","emptyTask","classNameItem","item","itemEditModeOn","className","spellCheck","placeholder","autoFocus","onBlur","id","trim","onChange","e","currentTarget","value","textareaTask","onClick","label","type","checkbox","custom小heckbox","ADD_TASK","TOGGLE_STATUS","EDIT_TASK","InitialState","items","currentId","listReducer","state","action","newList","i","length","reducers","combineReducers","list","store","createStore","AppConnect","connect","tasks","dispatch","addTask","tasksElements","map","MainApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f1d8be6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"tasks_item__1rToU\",\"emergenceItem\":\"tasks_emergenceItem__1rLAV\",\"task\":\"tasks_task__2_gu6\",\"emptyTask\":\"tasks_emptyTask__2w5lA\",\"statusTrue\":\"tasks_statusTrue__3hd1C\",\"textareaTask\":\"tasks_textareaTask__LwXlm\",\"label\":\"tasks_label__4Okqm\",\"checkbox\":\"tasks_checkbox__1CFpN\",\"custom小heckbox\":\"tasks_custom小heckbox__rmXlB\",\"itemEditModeOn\":\"tasks_itemEditModeOn__3ckj1\"};","import React, { useState } from 'react'\r\nimport styles from './tasks.module.scss'\r\nimport cn from 'classnames'\r\n\r\nlet Tasks = ({ el, editTask, toggleStatus }) => {\r\n\r\n  let [editMode, setEditMode] = useState(false)\r\n  let [taskNameValue, setTaskNameValue] = useState(el.task)\r\n\r\n  let activateEditMode = () => {\r\n    if (el.status) { setEditMode(true) }\r\n  }\r\n\r\n  let deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    editTask(el.id, taskNameValue.trim())\r\n    setTaskNameValue(el.task)\r\n  }\r\n\r\n  let onTaskChange = (e) => {\r\n    setTaskNameValue(e.currentTarget.value)\r\n  }\r\n\r\n  let classNameP = cn(styles.task, {\r\n    [styles.statusTrue]: !el.status,\r\n    [styles.emptyTask]: !el.task,\r\n  })\r\n\r\n  let classNameItem = cn(styles.item, {\r\n    [styles.itemEditModeOn]: editMode,\r\n  })\r\n\r\n\r\n  return (\r\n    <div className={classNameItem}>\r\n      {editMode\r\n        ? <textarea spellCheck=\"false\"\r\n          placeholder='your task'\r\n          autoFocus\r\n          onBlur={deactivateEditMode}\r\n          onChange={onTaskChange}\r\n          value={taskNameValue}\r\n          className={styles.textareaTask}></textarea>\r\n        : <p onClick={activateEditMode}\r\n          className={classNameP}>{el.task\r\n            ? el.task\r\n            : \"your task\"}</p>}\r\n      <label className={styles.label}>\r\n        <input onChange={() => {\r\n          toggleStatus(el.id)\r\n        }}\r\n          type=\"checkbox\"\r\n          value={el.status}\r\n          className={styles.checkbox}></input>\r\n        <span className={styles.custom小heckbox}></span>\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tasks","//consts\r\nconst ADD_TASK = 'ADD_TASK'\r\nconst TOGGLE_STATUS = 'TOGGLE_STATUS'\r\nconst EDIT_TASK = 'EDIT_TASK'\r\n\r\n// status true means that task not done\r\nlet InitialState = {\r\n  items: [{ task: 'Create Web Application', status: true, id: 1 }],\r\n  currentId: 1\r\n}\r\n\r\n//reducer\r\nconst listReducer = (state = InitialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TASK: {\r\n      state.currentId++\r\n      return {\r\n        ...state,\r\n        items: [...state.items, { task: '', status: true, id: state.currentId }]\r\n      }\r\n    }\r\n    case EDIT_TASK: {\r\n      let newList = [...state.items]\r\n      for (let i = 0; newList.length > i; i++) {\r\n        if (newList[i].id === action.id) {\r\n          newList[i].task = action.task\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        items: newList\r\n      }\r\n    }\r\n    case TOGGLE_STATUS: {\r\n      let newList = [...state.items]\r\n      for (let i = 0; newList.length > i; i++) {\r\n        if (newList[i].id === action.id) {\r\n          newList[i].status = !newList[i].status\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        items: newList\r\n      }\r\n    }\r\n    default: return state\r\n  }\r\n}\r\n\r\n//actions\r\nexport const addTask = () => ({ type: ADD_TASK })\r\nexport const toggleStatus = (id) => ({ type: TOGGLE_STATUS, id })\r\nexport const editTask = (id, task) => ({ type: EDIT_TASK, id, task })\r\n\r\n\r\nexport default listReducer","import { combineReducers, createStore } from \"redux\";\r\nimport listReducer from \"./listReducer\";\r\n\r\nlet reducers = combineReducers({\r\n  list: listReducer,\r\n})\r\n\r\nlet store = createStore(reducers)\r\nexport default store","import { connect, Provider } from 'react-redux';\r\nimport './App.scss';\r\nimport Tasks from './components/tasks';\r\nimport { addTask, editTask, toggleStatus } from './redux/listReducer';\r\nimport store from './redux/store';\r\n\r\nfunction App({ addTask, tasks, toggleStatus, editTask }) {\r\n\r\n  let tasksElements = tasks.map(\r\n    (el) => (\r\n      <Tasks key={el.id}\r\n        el={el}\r\n        toggleStatus={toggleStatus}\r\n        editTask={editTask} />))\r\n\r\n  return (\r\n    <div className='heroWrap'>\r\n      <header>\r\n        <h1 className='mainTitle'>All Tasks</h1>\r\n      </header>\r\n      <div className=\"mainWrap\">\r\n        {tasksElements}\r\n      </div>\r\n      <button className='addNewTask' onClick={addTask}>+</button>\r\n    </div>\r\n  );\r\n}\r\n\r\n// desirable use selectors\r\nlet mstp = (state) => {\r\n  return {\r\n    tasks: state.list.items\r\n  }\r\n}\r\n\r\nlet mdtp = (dispatch) => {\r\n  return {\r\n    addTask: () => {\r\n      dispatch(addTask())\r\n    },\r\n    toggleStatus: (id) => {\r\n      dispatch(toggleStatus(id))\r\n    },\r\n    editTask: (id, task) => {\r\n      dispatch(editTask(id, task))\r\n    },\r\n  }\r\n}\r\n\r\nconst AppConnect = connect(mstp, mdtp)(App);\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <AppConnect />\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default MainApp;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport MainApp from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n); \n"],"sourceRoot":""}